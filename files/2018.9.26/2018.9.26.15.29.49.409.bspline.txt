const x = [0, 0.9, 1.5, 2.0, 2.9, 4]  
const y = [1, 1.2, 1.5, 3.0, 2.5, 3]  

const knots = [0,0,0,1,2,3,4,4,4] 
const order = 3


const search = (knots,order, x)=>{
  const index= knots.slice(0, -order)
    .reduce((pre,current,index)=>current <= x ? index:pre, 0)
  return index
}

const updateN = (N, knots, x, m, i)=>{
  const alpha1 = knots[m+i-1]-knots[i]
  const alpha2 = knots[m+i]-knots[i+1]
  
  const beta1 = knots.length-1 <m+i ? 0:
    N.length-1 <i ? 0:
    alpha1 ===0 ? 0:
    (x-knots[i])/alpha1*N[i]
    
  const beta2 = knots.length-1 <m+i ? 0:
    N.length-1 <i+1 ? 0:
    alpha2 ===0 ? 0:
    (knots[m+i]-x)/alpha2*N[i+1]
    
  const newN = beta1+beta2 

  return newN
}

const makeN = (knots, order,num, x) => {
  const index = search(knots, order, x)
  const N1 =[...Array(num)].map((v,i)=>i===index?1:0)
  const N = [...Array(order-1)].reduce((pre,current,m)=>{
    return pre.map((v,i,arr)=>updateN(arr, knots, x, m+2,i))
  },N1)
  return N
}

const num = x.length 
const x0 = x[0]

console.log(x0)
const index = search(knots, order, x0)
console.log(index)

const N = makeN(knots, order,num, x0)
console.log(N)

const A = x.map((value, i, arr) => makeN(knots, order, arr.length, value))
console.log(A)